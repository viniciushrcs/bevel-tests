##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Check if the peer is up
- name: "Waiting for peer pod {{ peer.name }} in {{ component_ns }}"
  include_role:
    name: "../../../platforms/shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Pod"
    namespace: "{{ component_ns }}"
    component_name: "{{ peer.name }}"
    kubernetes: "{{ organization_data.k8s }}"
    label_selectors:
      - name = {{ component_name }}

# install the required packages listed in package.json
- name: Installing the required packages listed in package.json
  npm:
    path: "{{ playbook_dir }}/../../../{{ smart_contract.deployjs_path }}"

# delete build directory directory
- name: delete build directory 
  file:
    path: "{{ playbook_dir }}/../../../{{ smart_contract.deployjs_path }}/build"
    state: absent

# create build directory directory
- name: create build directory 
  file:
    path: "{{ playbook_dir }}/../../../{{ smart_contract.deployjs_path }}/build"
    state: directory

# This task gets the node private key from the vault
- name: get nodekey from vault
  shell: |
    vault kv get -field=key {{ component_vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/{{ peer.name }}/data
  environment:
    VAULT_ADDR: "{{ component_vault.url }}"
    VAULT_TOKEN: "{{ component_vault.root_token }}"
  register: nodekey

# This task gets the transaction manager public key from the vault
- name: get tm_key from vault
  shell: |
    vault kv get -field=publicKey {{ component_vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/{{ peer.name }}/tm
  environment:
    VAULT_ADDR: "{{ component_vault.url }}"
    VAULT_TOKEN: "{{ component_vault.root_token }}"
  register: tm_key

- name: get tm_key from vault for other nodes
  shell: |
    vault kv get -field=publicKey {{ component_vault.secret_path | default('secretsv2') }}/{{item[1].org}}-bes/crypto/{{item[1].node}}/tm
  environment:
    VAULT_ADDR: "{{ component_vault.url }}"
    VAULT_TOKEN: "{{ component_vault.root_token }}"
  register: other_tm_list
  with_indexed_items: "{{ node_list }}"
  when: 
  - smart_contract.private_for == ''
  - item[1].org != organization_data.name

- debug:
    var: other_tm_list
- name: Set node_list to empty
  set_fact:
    local_private_for: ''

- name: Get node data
  set_fact:
    local_private_for={{ local_private_for |default('') ~ other_tm.stdout ~ ',' }}    
  loop: "{{ other_tm_list.results }}"
  loop_control:
    loop_var: other_tm 
  when: 
  - smart_contract.private_for == ''
  - other_tm.changed 

- name: Set fact
  set_fact:
    local_private_for=smart_contract.private_for
  when: smart_contract.private_for != ''

############################################################################################
# Run deploy.js to to install smart contract
- name: Run deploy.js for "{{ organization_data.name | lower }}"
  shell: |
    cd "{{ playbook_dir }}/../../../{{ smart_contract.deployjs_path }}"
    node deploy.js -v --url "{{ URL }}" --path "{{ contract_path }}" --entryPoint "{{ entrypoint }}" --contractName "{{ contract }}" --chainId 2018 --tmKey "{{ tm_key.stdout }}" --privateKey "{{ nodekey.stdout | regex_replace('0x', '') }}" --privateFor '{{ privateFor }}' --numberOfIteration "{{ numberOfIteration }}"
  vars:
    URL: "{{ peer.geth_url }}"
    contract_path: "{{ smart_contract.contract_path }}"
    entrypoint: "{{ smart_contract.entrypoint }}"
    contract: "{{ smart_contract.name }}"
    privateFor: "{{ local_private_for[:-1] }}"
    numberOfIteration: "{{ smart_contract.iterations }}"
  register: address
  retries: "{{ network.env.retry_count}}"
  delay: 5
  until: address['stdout_lines'][14] is defined and address['stdout_lines'][0] != "Error"

- debug:
    msg: 
      - "{{ address }}"
      - "{{ address['cmd'] }}"
      - "{{ address['stdout_lines'] }}"
    verbosity: 2

# Set the variables
- set_fact:
    contract_address: "{{ address['stdout_lines'][14] | regex_replace('contractAddress: ') | regex_replace(',') | replace(\"'\",'') | trim }}"
    contract_name: "{{ smart_contract.name }}"
    check: address['stdout_lines'][0]
  when: address['stdout_lines'][14] is defined and address['stdout_lines'][0] != "Error"

- name:  Checking contract_address
  debug: 
    msg: "{{contract_address}}"

############################################################################################
# Fail the playbook if check is not defined
- fail:
    msg: Supplychain smartcontract is not deployed, make sure the account is unlocked and network is up.
  when: check is not defined

# ############################################################################################

# delete node_module directory
- name: Remove node_module directory 
  file:
    path: "{{ playbook_dir }}/../../../{{ smart_contract.deployjs_path }}/node_modules"
    state: absent

