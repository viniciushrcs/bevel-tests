##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Check user msp already created
- name: Check if user msp already created
  shell: |
    vault kv get -field=admincerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/msp
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_user_result
  ignore_errors: yes
  changed_when: False
  
# Copy user certificates to vault
- name: Copy user certificates for orgs
  shell: |
    vault kv put {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/ca.crt)" client.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/client.crt)" client.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/client.key)"
    vault kv put {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/admincerts/{{ user.identity }}@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/cacerts/*.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/ca.crt)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"  
  when: 
    - vault_user_result.failed == True or vault_user_result.stdout == '' or (refresh_cert is defined and refresh_cert == true)
    - network.env.proxy != 'none'
  tags:
    - molecule-idempotence-notest

- name: Copy user certificates for orgs
  shell: |
    vault kv put {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/tls ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/ca.crt)" client.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/client.crt)" client.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/client.key)"
    vault kv put {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/msp admincerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/admincerts/{{ user.identity }}@{{ component_name }}-cert.pem)" cacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/cacerts/ca-{{ component_name }}-7054.pem)" keystore="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/keystore/*_sk)" signcerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/msp/signcerts/cert.pem)" tlscacerts="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{ user.identity }}@{{ component_name }}/tls/ca.crt)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"  
  when: 
    - vault_user_result.failed == True or vault_user_result.stdout == '' or (refresh_cert is defined and refresh_cert == true)
    - network.env.proxy == 'none'
  tags:
    - molecule-idempotence-notest
